> First right click in the hierarchy and go to 3D object and terrain. In the inspector select the terrain settings and in it go to mesh resolution and set the length, width and height of the terrain. Then go to Paint terrain, select Set Height in the drop down menu and set it to 100. Then set the y position of the terrain to -100. Make some boundries using the brush at the edge of the terrain to block sight while in game. Create a bumpy terrain. Then install the Terrain tools package from the package manager. Import assets from the unity asset store and download and import.

> Now select Paint Texture in the Paint terrain setting and add a layer of rock or sand or dirt. Add as many layers as you want. Then select the layer and use it in the area you want to apply that effect, set the intensity and brush size as per need. You can import tree prefabsor assets from the asset store and place them in the scene. Now in the Paint terrain option, select Set Height, press Ctrl and click on the height you want to set and create a platform as per your need and decorate it with bumps and layers. Now add the Timeline and animation tabs at the bottom.

> Create an empty game object named Master Timeline. Make a cube and another empty game object named Player Rig and make the cube and the main camera as its children. Set the cube as player and place the main camera behind it. Now click on the Master Timeline and create a new timeline. In the option that appears, drag the Player Rig option. Then just like animator, select the time and set the position and and rotation according to you after pressing record.

> Now import the package of spaceship from the asset store. If you drag the prefab in the scene and it is pink, then select the material and change the shader to HDRP > Lit. Also double click on the HDRP package in the imports, its in one of the files. Then copy the transform component of the Player Ship and drag a spaceship in the scene and paste the values in it.

> Now create a new script and place it on the Player ship. In the update method, make a float named horizontalMovement and equate it to Input.GetAxis("Horizontal"); And in the next line Debug.Log(horizontalMovement) and do the same for the verticalMovement. Go to Package Manager and install Input System. Then go to the PlayerControls script and in it add the namespace using UnityEngine.InputSystem; make a serialized field of type InputAction and name it movement. Comment the  floats and create the same variables but equate them to movement.ReadValue<Vector2>().x; and same for .y; In the scene, click the + button and add 2D composite which will create 2D Vector, in it double click on UP and press listen and select the key you want to assign. Do the same for all the bindings. Also add 2 methods, OnEnable and OnDisable and in both write movement.Enable() and movement.Disable() respectively.

> Remove the new input method, from package manager and project settings too. Go to PlayerControls and create a serialized field of type float and name it moveSpeed and set its value to 17f. Create 2 more float variables and name them rightOffset and upOffset. In update, equate them to xMovement (or yMovement) * Time.deltaTime * moveSpeed; In the next line make 2 new float variables named newXPos (or ZPos depending on which axis is horizontal) and equate it to transform.localPosition.x + rightOffset. Do the same for the newYPos and upOffset. After it write:
transform.localPosition = new Vector3
        (newXPos,
         newYPos,
         transform.localPosition.z);

> Now we have to clamp or restrict the movement of the ship to certain limit. So we will rename newXPos and newYPos to rawXPos/YPos. Then we will create 2 new float variables named clampedYPos/XPos and equate it to Mathf.Clamp(rawXPos/Ypos, -y/xRange, y/xRange);
which means that we clamp the horizontal and vertical movement to xRange and yRange where both ranges are serialized field. Cut-paste this whole code from Update and make a new method named ProcessTranslation().

> Now create a new method named ProcessRotation and call it in the Update method. Create 4 serialized fields of type float and name them positionPitchFactor, controlPitchFactor, positionYawFactor, controlRollFactor and set the appropriate values in (-)ve. In the method ProcessRotation, create a float and name it pitchDueToPosition and equate it to transform.localPosition.y * positionPitchFactor; This means that the local Y position will change with speed as per the positionPitchFactor that we set. Create another float named pitchDueToControlMovement and equate it to yMovement * controlPitchFactor; This will handle the tilt when the ship moves up and down. Add both of these and make it a new variable named pitch of type float.

> Now make a float named yaw and equate it to transform.localPosition.x * positionYawFactor; which will set the movement tilt when we move right or left. Make a new float and name it roll and equate it to xMovement * controlRollFactor; This will set the rotation along the axis of ship (forward/backward axis or z axis) when we move right or left. Atlast set the transform.localPosition = Quaternion.Euler(pitch,yaw,roll); which will combine the rotation angles of the ship.

> Now add a particle system in the hierarchy and import the unity package provided of the particles or one of the lasers png from internet and drag it in the shader part. Set the emission, shape, speed etc as per gameplay and change the shader of the material to Particles/Standard Unlit if it gets fazed or invisible.

> In the PlayerControls script, add a new method after ProcessRotation and name it ProcessFiring() and add it to update too. In the method write an if statement that if(Input.GetButton("Fire1") then call a new method and name it SetActiveLasers(true) else SetActiveLasers(false). Make a serialized field of an array of type GameObject and name it lasers: GameObject[] lasers;

> Now make this SetActiveLasers(bool isActive) and in it make a foreach loop:
	foreach (GameObject laser in lasers)
        {
            var emissionModule = GetComponent<ParticleSystem>().emission;
            emissionModule.enabled = isActive;
        }

the method will take a bool isActive as its parameter. Then in the loop, make a variable named emissionModule and equate it to GetComponent<ParticleSystem>().emission; This will give access to the emission module of the particle system. In the next line write: emissionModule.enabled = isActive. Which means if the value of isActive is true then the emission component is enabled and if the parameter is false then it will be disabled. Make 2 such lasers and add them on both sides of the ship.

> Now add a rigidbody on the Player Ship prefab and untick the Use Gravity and tick is Kinematic. Now create a CollisionHandler script and in that make OnCollisionEnter and OnTriggerEnter methods and print the statements Player crashed and Passed through respectively. Take a cube and make a bridge using it as a box collider is already present in it. Also add a capsule or sphere or anything and make it a trigger. Now go to the laser prefab and tick the Collision module in the particle system. In it change the tyoe to World and Min Kill Speed to 1 if you dont want the lasers to bounce on colliding.

> Now get a sphere and name it enemy and on it put the enemy script. In this script, remove the Start and update and make a method, OnParticleCollision and in it write Destroy(gameObject). Now create a particle system and make it look like an explosion or import the given particle system. Adding trails and noise will make the effect better and the standard unlit shader will look good too. Name this particle system as explosion and make it a child of the Player Ship prefab and also prefab it. Now in the CollisionHandler script, make a serialized field of type ParticleSystem and name it crashVFX. In the Trigger method call the CrashSequence method and in the method first write crashVFX.Play(); Then GetComponent of MeshRenderer, BoxCollider and PlayerControls and set enabled as false and then Invoke("ReloadLevel", loadDelay) where loadDelay is a float which gives the time after which the method is called.

> The ReloadLevel method is same as that from ProjectBoost:
    void ReloadLevel()
    {
        int currentSceneIndex = SceneManager.GetActiveScene().buildIndex;
        SceneManager.LoadScene(currentSceneIndex);
    }

> Now in the enemy script, make a serialized field of type game object and name it deathVFX. Create another serialized field of type Transform and name it parent. Now in the OnParticleCollision method, create a variable of type GameObject and name it vfx and equate it to Instantiate(deathVFX, transform.position, Quaternion.identity); and in the next line write vfx.transform.parent = parent and then Destroy(gameObject); In the scene drag the enemy explosion vfx and create a new empty game object and name it Spawn At Runtime and drag it in the transform serialized field.

> Now create a new script and name it SelfDestruct and add it in the enemy explosion vfx prefab. In this script, make a serialized field of type float and name it destroyTime and set its value to 4f. In the start method write Destroy(gameObject, destroyTime) This will destroy the enemy explosion prefab after 4 seconds.

> Now in the hierarchy, create an empty game object and name it Score Board. Create a new script named ScoreBoard and attach to this object. In the script, remove the start and update and make an int named score. Then create a public void method named IncreaseScore whcih takes an integer named amountToIncrease as its parameter. In the method, write: score += amountToIncrease and print score. Now in the enemy script, make a serialized field of type int and name it scorePerHit and set it to 15. Also create a variable named scoreBoard of type ScoreBoard. Create the Start method and in it equate scoreBoard to FindObjectOfType ScoreBoard. Now take the contents of the ParticleCollision method and create a new method named KillEnemy with it. Above ot create a new method and name it ProcessHit. Make this ProcessHit method and in it call IncreaseScore method of scoreBoard and give the parameter scorePerHit to it.

> Now add a UI of Text mesh pro. Select canvas and set the reference resolution to 1920 x 1080 and check that the render mode should be screen space overlay. Now first select the small cross hair type thing in the center of text box and stretch it to the edges of the canvas. Then place the text box at the bottom left corner of the canvas. Then go to rect transform of the text box and select the square box to bottom left. Make the text box bigger and write numbers 1 to 9 and set the size as per it. Set the font size 90. You can also add the outline colors. Set the font as venus rising font after downloading and importing from dafont.com.

> Now go to ScoreBoard script and add namespace using TMPro; Then create a variable of type TMP_Text and name it scoreText. In the start method get component of TMP_Text and equate it to scoreText and in the next line equate scoreText.text to "Start". Then in the IncreaseScore method, after increasing score, write scoreText.text = score.ToString();

> Now create another VFX or particle system by duplicating the explosion one and reduce the size and speed and radius of the particles to make it seem like a bullet hit. In the Enemy script, Ctrl + D the deathVFX field and name it hitVFX and also make a new serialized int named hitPoints and set it to 2. Now in the ParticleCollision method, place the KillEnemy method in amn if statement that if hitPoints == 0 then call it. In the ProcessHit method, before scoreBoard line, copy-paste the first 2 lines except Destroy in the ProcessHit and instead of deathVFX use hitVFX and after that hitPoints--;

> Now in the enemy script, in the start method, call a method named AddRigidbody. In the method, make a variable named rb of type rigidbody and equate it to gameObject.AddComponent<Rigidbody>(); and rb.useGravity = false; This will add rigidbody to the enemy game object on play and switch the gravity off. Now create a new scene and name it spaceships, in it create a plane of scales 10 and place your spaceship on it. Then drag atleast 5 more spaceships from prefabs to make them as enemy spaceships and make some changes in size and color etc and then make original prefab in a new folder in the prefabs folder by the name of enemies.

> Now in the enemy script, change the variable type of parent from transform to GameObject and remove the serialized field. Rename the variable as parentGameObject. Now create a new tag named SpawnAtRuntime and give it to Spawn At Runtime game object. In the start method, equate parentGameObject to GameObject.FindWithTag("SpawnAtRuntime"); and at the bottm, in the ProcessHit and KillEnemy, equate vfx.transform.parent = parentGameObject.transform;

> Now create a gameobject and name it Enemy Waves and reset it. Then in its child make another game object and name it Wave1. As its child, add the enemies you want in it. Prefab this Wave1 in a new folder in prefabs named Waves. Create a new timeline for wave1 and select and drag all its children in the timeline section and create animation just like player ship. Create total 5 of such waves using different ships.

> Now import the assets of admiral slackbar. In the Master timeline create a track group and in it select and drag all the waves and drop it in there. Create another track group and name it admiral slackbar. In it drag the png image in it. Select the sudio and drag it in the time line under admiral slackbar group.Set the length of the png image as per the length of the audio. Set the appropriate audios at specific locations. In the canvas, select UI, image and set the apprpriate size as per game screen at the bottom right and select the photo imported. Also write name of the character in text mesh pro beside it.

> Now create a game object and name it music player. In it add a c# script and name it MusicPlayer. In it remove the start and update and add Awake method. In it create an int named numMusicPlayer and equate it to FindObjectsOfType<MusicPlayer>().Length; Now set a condition that if the value of int is > 1 then Destroy(gameObject) else DontDestroyOnLoad(gameObject);

> Now in the enemy explosion particle effect, add an audio source and in it add the explosion sound effect. Now if the project was made in URP then the skybox provided will work, elsecreate sky and fog volume in hierarchy and change the virtual enviroment or skytype to HDRI sky and then add the HDRI sky assets to change the skybox.